/* output declarations */
%struct-type
%omit-struct-type
%readonly-tables
%global-table
%includes
%language=C++

/* delimiter */
%delimiters=","

/* naming */
%define slot-name name
%define hash-function-name hash
%define lookup-function-name lookup
%define class-name user_cmd


/* c-code */
%{
	#include <common/log.h>
	#include <common/string.h>
	#include <gdb/gdb.h>
	#include <user_cmd/cmd.h>
	#include <string.h>
%}

/* struct-type definition */
struct user_cmd_t;

%%
# command	exec callback		help callback		help text
test,		cmd_test_exec,		cmd_test_help,		"test command echoing all given arguments"
help,		cmd_help_exec,		0,					"print this help message"
inferior,	cmd_inferior_exec,	cmd_inferior_help,	"control inferior and its parameters"
break,		cmd_break_exec,		cmd_break_help,		"manage breakpoints"
exec,		cmd_exec_exec,		cmd_exec_help,		"run control"
variable,	cmd_var_exec,		cmd_var_help,		"manage user defined variables"
callstack,	cmd_callstack_exec,	cmd_callstack_help,	"control layout and variables on the callstack"
register,	cmd_register_exec,	cmd_register_help,	"control target registers"
memory,		cmd_memory_exec,	cmd_memory_help,	"display and modify memory"
evaluate,	cmd_evaluate_exec,	cmd_evaluate_help,	"evaluate an expressions"
%%

/**
 * \brief	execute user command
 *
 * \param	cmdline		user command and arguments
 *
 * \return	0			sucess
 * 			-1			error
 */
int cmd_exec(char* line){
	int i;
	int argc, r;
	char** argv;


	if(strsplit(strdeescape(line), &argc, &argv) != 0){
		ERROR("error pre-processing command string \"%s\"\n", line);
		return -1;
	}

	/* execute command */
	if(user_cmd::lookup(argv[0], strlen(argv[0])) <= 0){
		GDB("invalid user command \"%s\", trying direct execution by gdb\n", argv[0]);

		/* send unknown command to gdb */
		gdb->write(line, strlen(line));
		gdb->write((void*)"\n", 1);

		r = -1;
	}
	else
		r = user_cmd::lookup(argv[0], strlen(argv[0]))->exec(argc, argv);

	for(i=0; i<argc; i++)
		delete [] argv[i];
	delete [] argv;

	return r;
}
