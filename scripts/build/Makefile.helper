######################
## helper variables ##
######################

# variables that contain ' ' and ',' required for some replacements, that
# do not work with the characters used literally 
space :=
space +=
comma := ,


##############################
##   directory traversal   ###
##############################

# recursively include 'Makefile.build' on given directories, avoiding
# double-inclusion of the same Makefile
# directory for current iteration is available through $(loc_dir)
#
#	$(call dinclude,<directory list>)
define dinclude
	$(eval traverse := $(sort $(filter-out $(included),$(patsubst %/,%,$(1))))) \
	$(eval included += $(traverse)) \
	\
	$(foreach dir,$(traverse), \
		$(eval loc_dir=$(dir)) \
		$(eval include $(build)) \
	)
endef


##########################
##   file operations   ###
##########################

# return files that do not define a separate list of dependencies,
# i.e. $(<file>-y) is empty
#
#	$(call filter_single_dep,<file list>
define filter_single_dep
	$(foreach f, $(1), \
		$(if $($(call hostbasename,$(f))-y), \
			, \
			$(f) \
		) \
	)
endef

# return basename of given path, also removing .host, if present
#
# 	$(call hostbasename,<file>)
define hostbasename
$(strip $(subst .host,,$(basename $(1))))
endef

# check if a file exists
#
# 	$(call exists,<file>)
define exists
$(if $(wildcard $(1)),1,)
endef


##########################
##   rule generation   ###
###########################

# generate target-specific rule for <target>-*flags
#	- generate: <target>: <flag> += <target>-flag
#	- generate: $(basename <target>).i: <flag> += <target>-flag
#		%.i files are only build on explicite request and thus do not depent on <target>
#
#	$(call gen_rule_tgt_flags,<target>,<flag>,<dir_prefix>
define gen_rule_tgt_flags
	$(if $($(call hostbasename,$(1))-$(2)), \
		$(eval $(call gen_rule_basic,,$(3)$(1), $(2) += $($(call hostbasename,$(1))-$(2)))) \
		$(eval $(call gen_rule_basic,,$(3)$(basename $(1)).i, $(2) += $($(call hostbasename,$(1))-$(2)))) \
	)
endef

# generate target-specific rule for local flags, 
#	- generate: <target>: <flag> += <flag>-y subdir-<flag>
#	- generate: $(basename <target>).i: <flag> += <flag>-y subdir-<flag>
#		%.i files are only build on explicite request and thus do not depent on <target>
#
#	$(call gen_rule_flags,<target>,<flag>,<dir_prefix>
define gen_rule_loc_flags
	$(if $(strip $($(2)-y) $(loc_subdir-$(2))), \
		$(eval $(call gen_rule_basic,,$(3)$(1), $(2) += $($(2)-y) $(loc_subdir-$(2)))) \
		$(eval $(call gen_rule_basic,,$(3)$(basename $(1)).i, $(2) += $($(2)-y) $(loc_subdir-$(2)))) \
		, \
	)
endef

# generate rules for compound targets
# 	first $(<target>-y), which is $($(basename $(tgt))-y) is checked for external dependencies ($(ext_dep)), i.e. dependencies that
# 		origniate from a different path, are extracted
#
#	afterwards the rule is generated whereat <dir-prefix> is added to all non-external dependencies and external dependencies are
#		added as they are
#
#	$(call gen_rule_comp,<cmd-name>,<file list>,<dir_prefix>,<host-flag>
define gen_rule_comp
	$(foreach tgt,$(2), \
		$(eval ext_dep :=) \
		\
		$(foreach dep,$($(call hostbasename,$(tgt))-y), \
			$(if $(subst ./,,$(dir $(dep))), \
				$(eval ext_dep += $(dep)) \
				, \
			) \
		) \
		$(if $(strip $(4)), \
			$(call gen_rule_basic,$(1),$(3)$(tgt),$(patsubst %.o,%.host.o,$(addprefix $(3),$(filter-out $(ext_dep),$($(call hostbasename,$(tgt))-y))) $(ext_dep)),$(4)) \
			, \
			$(call gen_rule_basic,$(1),$(3)$(tgt),$(addprefix $(3),$(filter-out $(ext_dep),$($(call hostbasename,$(tgt))-y))) $(ext_dep),$(4)) \
		) \
	)
endef

# generate basic rule
#
#	$(call gen_rule_basic,<cmd-name>,<target>,<dependencies>,<host-flag>
define gen_rule_basic
	$(eval \
		$(call pdebug2,    generate rule:)
		$(call pdebug2,        $(strip $(2)): $(strip $(3)))
		$(if $(1), \
			$(call pdebug2,            $(mkdir) $$(@D)) \
			$(call pdebug2,            $$(call $(strip $(1)),$(strip $(4)))) \
		)
		$(call pdebug2)

		$(if $(1),
			$(eval \
				$(strip $(2)): $(strip $(3))
					$(mkdir) $$(@D)
					$$(call $(1),$(strip $(4))) \
			), \
			$(eval $(strip $(2)): $(strip $(3))) \
		) \
	)
endef



#################
##   helper   ###
#################

# convert string to upper case
#
# 	$(call upper_case,<string>)
define upper_case
$(shell echo $(1) | tr a-z A-Z)
endef

# returns 1 if $1 >= $2
#
# 	$(call cond_ge,<a>,<b>)
define cond_ge
$(shell test $1 -ge $2 && echo 1)
endef

# set default value of variable <var> based on the following scheme
#	if <var> is defined on the command-line
#		do not change it
#	else if CONFIG_<var> is defined
#		<var> := CONFIG_<var>
#	else
#		<var> := <value>
#
# $(call set_default,<var>,<value>)
define set_default
	$(if $(subst command line,,$(origin $(1))), \
		$(if $(CONFIG_$(1)), \
			$(eval $(1) := $(CONFIG_$(1))) \
			, \
			$(eval $(1) := $(2)) \
		) \
	)
endef
